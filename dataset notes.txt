21 columns
Our dataset provides all shots taken in the 2014-2015 season, distributed publicly on Kaggle. Has tons of information to predict whether a player is a good shooter. But in our context, to determine whether or not a shot will be a make or miss. 

The only problem I feel this dataset has to our problem is no information on individual players. Different players have different percentages to their field goal rating. With these numbers, our model could predict POSSIBLY with more accuracy whether or not a shot would hit. SO, we created a players.csv from basketball-reference.com for all the players that played in the 2014-2015 season. (Don't really know how we can use this data [personally LOL]).

game_id = useless

matchup = useless

Location = might matter, but very minuscule

Win/Lose = useless

Final Margin = useless

shot_number = may factor into fatigue, etc. Too many shots may lead to mindset adjustment 	etc. Useful stat

Period
Game_clock = period/game_clock very correlated, and can be combined so that it's more linear/one variable. Also need to convert this to a number. ex. Instead of 1:09, it would be in seconds or something. Doesn't really matter. AND it should have like a total time of 48:00 (48 mins in a game)
Shot_clock = nice because players may feel the pressure

Dribbles = first glance, I feel as if fewer dribbles = a higher chance of the shot going in. Because shots off the dribble are difficult. OR it could mean that a person has more touches and is more familiar with the ball.

touch_time = the ideas of the last feature. A person who touched the ball less may not be ready to shoot the ball

Shot dist = lower dist is an easier shot

pts type = 2 easier than 3?

Shot result = keep to calculate accuracy. Change to boolean

Closest defender = useless, not enough data to determine if a player determines shot accuracy (maybe with def ratings etc in the future)

Close def distance = can be useful. Lower dist, harder shot

Fgm = or shot result, pick one

pts = useless

Player name = correlated with our players.csv, maybe we can determine if a certain player can have a higher accuracy

50/50 datasplit:

Baseline: always around 0.5

Feature1:
	Log1 0.6061685016006871
	log2 0.6061528851409386
	Svm 0.6058561724057157
Feature2:
	Log1 0.6060904193019443
	log2 0.6060904193019443
	Svm 0.6060123370032013
Feature3: 
	Log1 0.6061060357616929
	log2 0.6060904193019443
	Svm 0.6060123370032013

95/5 datasplit:
Feature1:
	Log1 0.6074328544659587
	log2 0.6074328544659587
	Svm 0.6079013116801999
Feature2:
	Log1 0.6071205496564647
	log2 0.6069643972517177
	Svm 0.6069643972517177
Feature3: 
	Log1 0.6069643972517177
	log2 0.6069643972517177
	Svm 0.6069643972517177

Random Forest result (95/5 split) (params: n_estimators = 100, random_state = 42, max_depth=20)
Feature 1: Train accuracy:  0.8852915793367032 Test accuracy:  0.6032167395377889
Feature 2: Train accuracy:  0.8956150084247729 Test accuracy:  0.6141474078700812
Feature 3: Train accuracy:  0.8908971355771997 Test accuracy:  0.6119612742036228
Feature 4: Train accuracy:  0.8918916697489007 Test accuracy:  0.6099312929419113

Random Forest result (95/5 split) (n_estimators = 1000, random_state = 42, max_depth=4)
Feature 1: Train accuracy:  0.6134549788353265 Test accuracy:  0.6153966271080574
Feature 2: Train accuracy:  0.6137097768462582 Test accuracy:  0.6144597126795752
Feature 3: Train accuracy:  0.61358648748613 Test accuracy:  0.6146158650843223
Feature 4: Train accuracy:  0.6135289524514035 Test accuracy:  0.6116489693941287

Random Forest result (95/5 split) (n_estimators = 10, random_state = 42)
Feature 1: Train accuracy:  0.9757448732174413 Test accuracy:  0.5701124297314178
Feature 2: Train accuracy:  0.9805613775531171 Test accuracy:  0.5840099937539038
Feature 3: Train accuracy: 0.9794188961492624 Test accuracy:  0.5765146783260462
Feature 4: Train accuracy:  0.9821477006534336 Test accuracy:  0.5832292317301686

Random Forest result (50/50 split) (params: n_estimators = 100, random_state = 42, max_depth=20)
Feature 1: Train accuracy:  0.9368148171284005 Test accuracy:  0.595439993753416
Feature 2: Train accuracy:  0.9424680638410844 Test accuracy:  0.6028734285937378
Feature 3: Train accuracy:  0.9348471124714995 Test accuracy:  0.6032013742484579
Feature 4: Train accuracy:  0.9373145516444389 Test accuracy:  0.6079800109315219


